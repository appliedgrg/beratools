name: Build GDAL Wheel (vcpkg, Windows)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      GDAL_TAG: "v3.9.3"
      PY_VER: "3.11"
      VCPKG_COMMIT: "271a5b8850aa50f9a40269cbf3cf414b36e333d6"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      # Set up vcpkg with caching
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
          vcpkgJsonGlob: '**/vcpkg.json'

      # Install GDAL with comprehensive features
      - name: Install GDAL and dependencies via vcpkg
        shell: pwsh
        run: |
          $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
          $env:VCPKG_DEFAULT_TRIPLET = "x64-windows"
          
          # Install GDAL with many features for a "fat" wheel
          & "${env:VCPKG_ROOT}\vcpkg.exe" install `
            "gdal[core,geos,sqlite3,libgeotiff,openjpeg,png,jpeg,zlib,curl,expat,libxml2,netcdf,hdf5,postgresql,mysql]" `
            --triplet x64-windows
          
          # Install PROJ separately
          & "${env:VCPKG_ROOT}\vcpkg.exe" install proj --triplet x64-windows

      # Clone and build GDAL
      - name: Build GDAL
        shell: pwsh
        run: |
          $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
          
          git clone --depth 1 --branch $env:GDAL_TAG https://github.com/OSGeo/gdal C:\src\gdal
          cd C:\src\gdal
          
          mkdir build
          cd build
          
          # Use Visual Studio generator (installed by default)
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${env:VCPKG_ROOT}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_PYTHON_BINDINGS=ON `
            -DGDAL_BUILD_OPTIONAL_DRIVERS=ON `
            -DOGR_BUILD_OPTIONAL_DRIVERS=ON `
            -DGDAL_USE_EXTERNAL_LIBS=ON
          
          cmake --build . --config Release -j 4
          cmake --install . --prefix C:\gdal-install --config Release

      # Build Python wheel
      - name: Build Python wheel
        shell: pwsh
        run: |
          $env:GDAL_HOME = "C:\gdal-install"
          $env:PATH = "C:\gdal-install\bin;$env:PATH"
          
          cd C:\src\gdal\swig\python
          
          # Upgrade pip and install build dependencies
          python -m pip install --upgrade pip setuptools wheel numpy
          
          # Build the wheel
          python setup.py bdist_wheel
          
          Write-Host "Original wheel created:"
          Get-ChildItem dist\*.whl

      # Make wheel self-contained with delvewheel
      - name: Repair wheel with delvewheel
        shell: pwsh
        run: |
          $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
          
          python -m pip install delvewheel
          
          # Find the wheel
          $wheel = (Get-ChildItem C:\src\gdal\swig\python\dist\*.whl)[0].FullName
          
          Write-Host "Repairing wheel: $wheel"
          
          # Create output directory for repaired wheel
          New-Item -ItemType Directory -Force -Path C:\repaired_wheels
          
          # Repair wheel - add all necessary DLL search paths
          python -m delvewheel repair "$wheel" `
            --add-path "${env:VCPKG_ROOT}\installed\x64-windows\bin" `
            --add-path "${env:VCPKG_ROOT}\installed\x64-windows\tools\proj" `
            --add-path "C:\gdal-install\bin" `
            --wheel-dir C:\repaired_wheels `
            -v
          
          Write-Host "Repaired wheel:"
          Get-ChildItem C:\repaired_wheels\*.whl

      # Test the wheel
      - name: Test wheel installation
        shell: pwsh
        run: |
          # Create fresh virtual environment
          python -m venv C:\test_env
          C:\test_env\Scripts\Activate.ps1
          
          # Install the repaired wheel
          $wheel = (Get-ChildItem C:\repaired_wheels\*.whl)[0].FullName
          python -m pip install "$wheel"
          
          # Test GDAL import and basic functionality
          python -c "from osgeo import gdal, ogr, osr; print(f'GDAL version: {gdal.__version__}'); print(f'Drivers: {gdal.GetDriverCount()}')"

      # Upload repaired wheel
      - uses: actions/upload-artifact@v4
        with:
          name: gdal-wheel-${{ env.GDAL_TAG }}-py${{ env.PY_VER }}-win_amd64
          path: C:\repaired_wheels\*.whl
          retention-days: 90