name: Publish to Anaconda (rattler-build + Pixi)

on:
  push:
    tags: 
        - 'main/*.*.*' # Trigger when a tagged the `main` branch with format like 1.0.0

jobs:
  build-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12, 3.13]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Disable Pixi cache — avoids pixi.lock lookup
      - name: Setup Pixi
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          cache: false

      - name: Install rattler-build + anaconda-client
        run: |
          pixi global install rattler-build anaconda-client
          echo "$HOME/.pixi/bin" >> "$GITHUB_PATH"

      # IMPORTANT: run build inside ./packaging and pass channels explicitly
      # so tests can resolve 'bera_centerlines' from appliedgrg.
      - name: Build Conda package (from ./packaging, with channels)
        working-directory: packaging
        run: |
          set -euo pipefail
          echo "🏗️ Building with explicit channels: appliedgrg, conda-forge"
          rattler-build build -c appliedgrg -c conda-forge
          echo "Build complete. Outputs under ./output"

      # Collect artifacts from a certain place into ./dist/conda
      - name: Collect artifacts to ./dist/conda
        run: |
          set -euo pipefail
          mkdir -p dist/conda
          shopt -s nullglob
          echo "📦 Collecting build outputs from packaging/output"

          files=(packaging/output/*.conda packaging/output/*.tar.bz2)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No artifacts in packaging/output. Wider sweep (fallback)..."
            files=($(find packaging -type f \( -name '*.conda' -o -name '*.tar.bz2' \)))
          fi

          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No build artifacts found. Check rattler-build output."
            exit 1
          fi

          for f in "${files[@]}"; do
            cp -v "$f" dist/conda/
          done

          echo "✅ Artifacts staged in dist/conda:"
          ls -lah dist/conda

      - name: Upload to Anaconda.org (binstar)
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(dist/conda/*.conda dist/conda/*.tar.bz2)

          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No package artifacts found to upload."
            exit 1
          fi

          for f in "${files[@]}"; do
            echo "🚀 Uploading $f"
            # Pixi exposes `binstar` (not `anaconda`). Use --label (not --channel).
            binstar -t "$ANACONDA_API_TOKEN" upload "$f" \
              --user appliedgrg --label main --force
          done

          echo "🎉 Upload complete!"
