{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>BERA Tools is a series of script tools for facilitating the high-resolution mapping and studying of forest lines (petroleum exploration corridors in forested areas) via processing canopy height models (LiDAR or photogrammetry derived raster images where pixel-values represent the ground-height of vegetation).</p>"},{"location":"#motivation","title":"Motivation","text":"<p>Given that the process of manually digitizing detailed small-scale (boreal) forest lines is slow and prone to human error, a semi-automated solution is preferred for large-scale application areas. Additionally, high-resolution CHMs allow for improved forest line spatial analysis.</p>"},{"location":"#credit","title":"Credit","text":"<p>This tool is part of the Boreal Ecosystem Recovery and Assessment (BERA) Project, and is being actively developed by the Applied Geospatial Research Group.</p>"},{"location":"#cite-us","title":"Cite Us","text":"<p>If you use BERA Tools for a publication, please cite it as:</p> <pre><code>@misc{BERA Tools,\n  author = \"Applied Geospatial Research Group\",\n  title = \"Forest Line Mapper\",\n  howpublished = \"\\url{https://github.com/appliedgrg/BERATools}\",\n}\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>This tool is part of the Boreal Ecosystem Recovery and Assessment (BERA) Project, and was developed by the Applied Geospatial Research Group.</p>"},{"location":"#reference","title":"Reference","text":"<p>The Forest Line Mapper: A Semi-Automated Tool for Mapping Linear Disturbances in Forests, Gustavo Lopes Queiroz, Gregory J. McDermid, Mir Mustafizur Rahman, and Julia Linke. Remote Sens. 2020, 12(24), 4176. https://doi.org/10.3390/rs12244176</p>"},{"location":"#license","title":"License","text":"<p>BERA Tools is release under the GPL 3.0 (GNU General Public License v3.0). Please refer to the LICENSE file contained in the source for complete license description.</p> <p>Copyright (C) 2026  Applied Geospatial Research Group</p>"},{"location":"api/","title":"Python API Reference","text":"<p>This page documents the main Python modules in BERA Tools using mkdocstrings.</p>"},{"location":"api/#tools-api","title":"Tools API","text":"<p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>The purpose of this script is to provide main interface for line grouping tool.</p> <p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>The purpose of this script is the public interface for vertex optimization.</p> <p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>The purpose of this script is to provide main interface for centerline tool.</p> <p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>The purpose of this script is to provide main interface for canopy footprint tool. The tool is used to generate the footprint of a line based on absolute threshold.</p> <p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng, Maverick Fong</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>This file hosts the ground_footprint tool.</p>"},{"location":"api/#beratools.tools.check_seed_line.qc_merge_multilinestring","title":"qc_merge_multilinestring","text":"<pre><code>qc_merge_multilinestring(gdf)\n</code></pre> <p>QC step: Merge MultiLineStrings if possible, else split into LineStrings.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>Input GeoDataFrame.</p> required <p>Returns:</p> Name Type Description <code>GeoDataFrame</code> <p>Cleaned GeoDataFrame with only LineStrings.</p>"},{"location":"api/#beratools.tools.check_seed_line.qc_split_lines_at_intersections","title":"qc_split_lines_at_intersections","text":"<pre><code>qc_split_lines_at_intersections(gdf)\n</code></pre> <p>QC step: Split lines at intersections so each segment becomes a separate line object.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>Input GeoDataFrame of LineStrings.</p> required <p>Returns:</p> Name Type Description <code>GeoDataFrame</code> <p>New GeoDataFrame with lines split at all intersection points.</p>"},{"location":"api/#beratools.tools.canopy_footprint_absolute.FootprintAbsolute","title":"FootprintAbsolute","text":"<pre><code>FootprintAbsolute(line_seg, in_chm, corridor_thresh, max_ln_width, exp_shk_cell)\n</code></pre> <p>Class to compute the footprint of a line based on absolute threshold.</p>"},{"location":"api/#beratools.tools.canopy_footprint_absolute.FootprintAbsolute.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Generate line footprint.</p>"},{"location":"api/#beratools.tools.line_footprint_relative.CenterlineParams","title":"CenterlineParams","text":"<p>               Bases: <code>float</code>, <code>Enum</code></p> <p>Parameters for centerline generation.</p> <p>These parameters are used to control the behavior of centerline generation and should be adjusted based on the specific requirements of the application.</p>"},{"location":"api/#beratools.tools.line_footprint_relative.CenterlineStatus","title":"CenterlineStatus","text":"<p>               Bases: <code>IntEnum</code></p> <p>Status of centerline generation.</p> <p>This enum is used to indicate the status of centerline generation. It can be used to track the success or failure of the centerline generation process.</p>"},{"location":"api/#beratools.tools.line_footprint_relative.SeedLine","title":"SeedLine","text":"<pre><code>SeedLine(line_gdf, ras_file, proc_segments, line_radius)\n</code></pre> <p>Class to store seed line and least cost path.</p>"},{"location":"api/#beratools.tools.line_footprint_relative.ToolBase","title":"ToolBase","text":"<pre><code>ToolBase()\n</code></pre> <p>               Bases: <code>object</code></p> <p>Base class for tools.</p>"},{"location":"api/#beratools.tools.line_footprint_relative.CenterlineFlags","title":"CenterlineFlags","text":"<p>               Bases: <code>Flag</code></p> <p>Flags for the centerline algorithm.</p>"},{"location":"api/#beratools.tools.line_footprint_relative.ParallelMode","title":"ParallelMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>Defines the parallel mode for the algorithms.</p>"},{"location":"api/#beratools.tools.line_footprint_relative.find_corridor_threshold","title":"find_corridor_threshold","text":"<pre><code>find_corridor_threshold(raster)\n</code></pre> <p>Find the optimal corridor threshold by raster histogram Parameters</p> <p>raster : corridor raster</p>"},{"location":"api/#beratools.tools.line_footprint_relative.find_corridor_threshold--returns","title":"Returns","text":"<p>corridor_threshold : float</p>"},{"location":"api/#beratools.tools.line_footprint_relative.centerline_is_valid","title":"centerline_is_valid","text":"<pre><code>centerline_is_valid(centerline, input_line)\n</code></pre> <p>Check if centerline is valid.</p> <p>Parameters:</p> Name Type Description Default <code>centerline</code> <code>_type_</code> <p>description</p> required <code>input_line</code> <code>LineString</code> <p>Seed line or least cost path.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if line is valid</p>"},{"location":"api/#beratools.tools.line_footprint_relative.find_centerline","title":"find_centerline","text":"<pre><code>find_centerline(poly, input_line)\n</code></pre> <p>Find centerline from polygon and input line.</p> <p>Parameters:</p> Name Type Description Default <code>poly </code> <p>sh_geom.Polygon</p> required <code>input_line</code> <code>LineString</code> <p>Least cost path or seed line</p> required <p>Returns: centerline (sh_geom.LineString): Centerline status (CenterlineStatus): Status of centerline generation</p>"},{"location":"api/#beratools.tools.line_footprint_relative.process_single_centerline","title":"process_single_centerline","text":"<pre><code>process_single_centerline(row_and_path)\n</code></pre> <p>Find centerline.</p> <p>Args: row_and_path (list of row (gdf and lc_path)): and least cost path first is GeoPandas row, second is input line, (least cost path)</p> <p>Returns: row: GeoPandas row with centerline</p>"},{"location":"api/#beratools.tools.line_footprint_relative.regenerate_centerline","title":"regenerate_centerline","text":"<pre><code>regenerate_centerline(poly, input_line)\n</code></pre> <p>Regenerates centerline when initial poly is not valid.</p> <p>Parameters:</p> Name Type Description Default <code>input_line</code> <code>LineString</code> <p>Seed line or least cost path.</p> required <p>Returns:</p> Type Description <p>sh_geom.MultiLineString</p>"},{"location":"api/#beratools.tools.line_footprint_relative.cut_line_by_length","title":"cut_line_by_length","text":"<pre><code>cut_line_by_length(line, length, merge_threshold=0.5)\n</code></pre> <p>Split line into segments of equal length.</p> <p>Merge the last segment with the second-to-last if its length is smaller than the given threshold.</p> <p>Parameters:</p> Name Type Description Default <code>line </code> <p>LineString Line to be split by distance along the line.</p> required <code>length </code> <p>float Length of each segment to cut.</p> required <code>merge_threshold </code> <p>float, optional Threshold below which the last segment is merged with the previous one. Default is 0.5.</p> required <p>Returns:</p> Type Description <p>List of LineString objects A list containing the resulting line segments.</p> Example <p>\"&gt;&gt;&gt; from shapely.geometry import LineString \"&gt;&gt;&gt; line = LineString([(0, 0), (10, 0)]) \"&gt;&gt;&gt; segments = cut_line_by_length(line, 3, merge_threshold=1) \"&gt;&gt;&gt; for segment in segments: \"&gt;&gt;&gt;     print(f\"Segment: {segment}, Length: {segment.length}\")</p> <p>Output: Segment: LINESTRING (0 0, 3 0), Length: 3.0 Segment: LINESTRING (3 0, 6 0), Length: 3.0 Segment: LINESTRING (6 0, 9 0), Length: 3.0 Segment: LINESTRING (9 0, 10 0), Length: 1.0</p> <p>After merging the last segment with the second-to-last segment:</p> <p>Output: Segment: LINESTRING (0 0, 3 0), Length: 3.0 Segment: LINESTRING (3 0, 6 0), Length: 3.0 Segment: LINESTRING (6 0, 10 0), Length: 4.0</p>"},{"location":"api/#beratools.tools.ground_footprint.prepare_line_args","title":"prepare_line_args","text":"<pre><code>prepare_line_args(line_gdf, poly_gdf, n_samples, offset, width_percentile)\n</code></pre> <p>Generate arguments for each line in the GeoDataFrame.</p> <p>Returns:</p> Name Type Description <code>line_args</code> <p>list row : inter_poly : n_samples : offset : width_percentile :</p>"},{"location":"api/#beratools.tools.ground_footprint.generate_sample_points","title":"generate_sample_points","text":"<pre><code>generate_sample_points(line, n_samples=10)\n</code></pre> <p>Generate evenly spaced points along a line.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>LineString</code> <p>The line along which to generate points.</p> required <code>n_samples</code> <code>int</code> <p>The number of points to generate (default is 10).</p> <code>10</code> <p>Returns:</p> Name Type Description <code>list</code> <p>List of shapely Point objects.</p>"},{"location":"api/#beratools.tools.ground_footprint.generate_fixed_width_footprint","title":"generate_fixed_width_footprint","text":"<pre><code>generate_fixed_width_footprint(line_gdf, max_width=False)\n</code></pre> <p>Create a buffer around each line.</p> <p>In the GeoDataFrame using its 'max_width' attribute and saves the resulting polygons in a new shapefile.</p> <p>Args: line_gdf: GeoDataFrame containing LineString with 'max_width' attribute. max_width: Use max width or not to produce buffer.</p>"},{"location":"api/#beratools.tools.ground_footprint.calculate_average_width","title":"calculate_average_width","text":"<pre><code>calculate_average_width(line, in_poly, offset, n_samples)\n</code></pre> <p>Calculate the average width of a polygon perpendicular to the given line.</p>"},{"location":"api/#constants","title":"Constants","text":"<p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>The purpose of this script is to provide common constants.</p>"},{"location":"api/#beratools.core.constants.CenterlineFlags","title":"CenterlineFlags","text":"<p>               Bases: <code>Flag</code></p> <p>Flags for the centerline algorithm.</p>"},{"location":"api/#beratools.core.constants.ParallelMode","title":"ParallelMode","text":"<p>               Bases: <code>IntEnum</code></p> <p>Defines the parallel mode for the algorithms.</p>"},{"location":"api/#logger","title":"Logger","text":"<p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>The purpose of this script is to provide logger functions.</p>"},{"location":"api/#beratools.core.logger.NoParsingFilter","title":"NoParsingFilter","text":"<p>               Bases: <code>Filter</code></p> <p>Filter to exclude log messages that start with \"parsing\".</p> <p>This is useful to avoid cluttering the log with parsing-related messages.</p>"},{"location":"api/#beratools.core.logger.Logger","title":"Logger","text":"<pre><code>Logger(name, console_level=INFO, file_level=INFO)\n</code></pre> <p>               Bases: <code>object</code></p> <p>Logger class to handle logging in the BERA Tools application.</p> <p>This class sets up a logger that outputs to both the console and a file. It allows for different logging levels for console and file outputs. It also provides a method to print messages directly to the logger.</p>"},{"location":"api/#beratools.core.logger.Logger.print","title":"print","text":"<pre><code>print(msg, flush=True)\n</code></pre> <p>Re-define print in logging.</p> <p>Args: msg : flush :</p>"},{"location":"api/#tool-base","title":"Tool Base","text":"<p>Copyright (C) 2025 Applied Geospatial Research Group.</p> <p>This script is licensed under the GNU General Public License v3.0. See https://gnu.org/licenses/gpl-3.0 for full license details.</p> <p>Author: Richard Zeng</p> Description <p>This script is part of the BERA Tools. Webpage: https://github.com/appliedgrg/beratools</p> <p>The purpose of this script is to provide fundamental utilities for tools.</p>"},{"location":"api/#beratools.core.tool_base.ToolBase","title":"ToolBase","text":"<pre><code>ToolBase()\n</code></pre> <p>               Bases: <code>object</code></p> <p>Base class for tools.</p>"},{"location":"developer_guide/","title":"Overview","text":""},{"location":"developer_guide/#versioning","title":"Versioning","text":"<p>Versioning follows PEP440: <code>major.minor.patch</code>.</p> Versions Description Major This is reserved for releases that introduce breaking features. Minor This is reserved for releases that introduce new functionality. Patch This is reserved for releases that only include bug fixes."},{"location":"developer_guide/#from-source","title":"From Source","text":"<p>To install the latest development version from source:</p>"},{"location":"developer_guide/#use-conda","title":"Use Conda","text":"<pre><code># Option A: create env from the provided environment.yml\nconda env create -f environment.yml\nconda activate beratools\n\n# Option B: create a fresh conda env manually\nconda create -n beratools python=3.11 -y\nconda activate beratools\nconda install -c conda-forge pip git setuptools wheel -y\n\n# Install the package from the cloned source (editable for development)\ngit clone https://github.com/appliedgrg/beratools.git\ncd beratools\npip install -e .\n\n# If the project exposes development extras:\n# pip install -e \".[dev]\"\n</code></pre>"},{"location":"developer_guide/#use-pip","title":"Use Pip","text":"<pre><code>git clone https://github.com/appliedgrg/beratools.git\ncd beratools\npip install .\n</code></pre>"},{"location":"developer_guide/#packaging-bera-tools","title":"Packaging BERA Tools","text":""},{"location":"developer_guide/#build-pypi-package","title":"Build PyPI Package","text":""},{"location":"developer_guide/#build-conda-package","title":"Build Conda Package","text":"<p>pip build only backend: mamba install hatch front end: pip install build PyPI upload: mamba install twine</p> <p>recommended way to install BERA Tools</p> <p>conda create -n bera -c conda-forge -c appliedgrg python=3.11 mamba --override-channels conda activate bera conda config --set channel_priority strict mamba install --file conda_requirements.txt</p> <p>check channels in use</p> <p>conda config --get channels  Example output:    --add channels 'conda-forge'   # lowest priority    --add channels 'appliedgrg'   # highest priority</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#bera-tools","title":"BERA Tools","text":"<p>BERA Tools is a suite of utilities for mapping, analyzing, and processing forest linear disturbances. It provides both command-line and GUI interfaces, along with a set of modular tools for various workflows. </p> <p>BERA Tools provide tools for enhanced delineation and attribution of linear disturbances in forests.</p>"},{"location":"overview/#key-features","title":"Key Features","text":"<ul> <li>Line cleanup and quality control</li> <li>Vertex optimization using raster guidance</li> <li>Automatic centerline generation</li> <li>Multiple footprint methods: absolute, relative, fixed-width</li> <li>Small, scriptable command-line tools for batch processing</li> </ul>"},{"location":"overview/#data-formats-conventions","title":"Data Formats &amp; Conventions","text":"<ul> <li>Supported vector: GeoPackage, Shapefile</li> <li>Supported raster: GeoTIFF</li> </ul>"},{"location":"overview/#support-contributions","title":"Support &amp; Contributions","text":"<ul> <li>See the repository README for detailed examples.</li> <li>Contributions welcome via issues and pull requests. Include tests and minimal reproducible examples.</li> </ul>"},{"location":"overview/#tool-boxes","title":"Tool Boxes","text":""},{"location":"overview/#mapping","title":"Mapping","text":"Tool Details Check Seed Line Groups and splits input lines for seed line quality control. Vertex Optimization Optimizes line vertices using raster data for improved delineation. Centerline Generates centerlines from input lines and raster data. Line Footprint (Absolute) Generates line footprints based on absolute canopy thresholds. Line Footprint (Relative) Creates dynamic line footprints using least-cost corridor and relative thresholds. Line Footprint (Fixed Width) Computes fixed-width line footprints and associated statistics."},{"location":"user_guide/","title":"Quick Start","text":"<p>BERA Tools provide a light weight GUI to use tools.</p> <p></p> <p>Run the command in MiniConda/Anaconda Prompt to start BERA Tools main gui.</p> <pre><code>$ conda activate bera\n$ beratools \n</code></pre>"},{"location":"user_guide/#example-data","title":"Example Data","text":"<p>Download latest example data</p>"},{"location":"user_guide/#main-gui","title":"Main GUI","text":"<p>The BERA Tools main GUI consists of the following components:</p> Panel / Section Description Tool Selection Panel (Left) A tree view listing all available tools, organized by toolbox. Users can search for tools using the search bar at the top. Selecting a tool updates the main panel. Tool History Panel (Left, below tool selection) Displays a list of recently used tools for quick access, with options to clear or remove items. Main Panel (Right) Top Section: Shows the currently selected tool name, with buttons for advanced options, viewing code, and help.Tool Parameters: Dynamic widgets for entering parameters required by the selected tool.Bottom Section: Includes a slider to select the number of CPU cores, a button to load default arguments, and buttons to run or cancel the tool. Output and Progress (Bottom Right) A text area displays output, logs, and messages from tool execution.A progress bar and label show the status of running tools."},{"location":"user_guide/#workflow-diagram","title":"Workflow Diagram","text":"<pre><code>graph TD\n    A[\"Check Seed Line\"] --&gt; B[\"Vertex Optimization\"]\n    B --&gt; C[\"Centerline\"]\n    A --&gt; C[\"Centerline\"]\n    C --&gt; D1[\"Canopy Footprint&lt;br/&gt;Absolute\"]\n    C --&gt; D2[\"Canopy Footprint&lt;br/&gt;Relative\"]\n    D1 --&gt; E[\"Ground Footprint\"]\n    D2 --&gt; E[\"Ground Footprint\"]\n    %% Style optional step (Vertex Optimization)\n    style B fill:#eee,stroke:#aaa,color:#666,stroke-width:1px,stroke-dasharray:5 5;\n    click A \"../user/check_seed_line\" \"Check Seed Line\"\n    click B \"../user/vertex_optimization\" \"Vertex Optimization\"\n    click C \"../user/centerline\" \"Centerline\"\n    click D1 \"../user/canopy_footprint_abs\" \"Canopy Footprint Absolute\"\n    click D2 \"../user/line_footprint_rel\" \"Canopy Footprint Relative\"\n    click E \"../user/ground_footprint\" \"Ground Footprint\"</code></pre>"},{"location":"developer/contributing/","title":"Contributing","text":"<p>Thank you for your interest in improving BERA Tools. Whether you are a user, a new developer, or an experienced contributor, your involvement is highly valued. This guide will help you find the best way to participate.</p>"},{"location":"developer/contributing/#bera-tools-contribution-flowchart","title":"BERA Tools Contribution Flowchart","text":"<pre><code>flowchart TD\n    A([Interested in contributing to a BERA Tools project?])\n    B{Are you a User or a Developer?}\n    A --&gt; B\n    B --&gt; C1[User]\n    B --&gt; C2[Developer]\n\n    C1 --&gt; D1[Check documentation and issue tracker]\n    D1 --&gt; E1[Submit an Issue]\n    E1 --&gt; F1[Await feedback or updates]\n\n    C2 --&gt; G{Type of Contribution}\n    G --&gt; H1[Quick Fixes &amp; Small Improvements]\n    G --&gt; H2[Major Contributions &amp; Advanced Development]\n\n    H1 --&gt; I1[Fork the repository]\n    I1 --&gt; J1[Make your changes]\n    J1 --&gt; K1[Submit a Pull Request]\n    K1 --&gt; L1[Participate in discussion]\n    L1 --&gt; M1([Contribution complete!])\n\n    H2 --&gt; I2[Check for existing Issues/PRs]\n    I2 --&gt; J2[Create a branch]\n    J2 --&gt; K2[Make substantial changes, follow guidelines]\n    K2 --&gt; L2[Submit a Pull Request, reference Issues]\n    L2 --&gt; M2[Review code and support others]\n    M2 --&gt; N2([Contribution complete!])</code></pre>"},{"location":"developer/contributing/#for-non-developers","title":"For Non-developers","text":""},{"location":"developer/contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>We appreciate your help in making BERA Tools better! If you encounter a bug or have a suggestion, please:</p> <ol> <li> <p>Review the documentation and search the issue tracker to see if your question or issue has already been addressed.</p> </li> <li> <p>When submitting a new issue, include as much detail as possible:</p> <ul> <li>BERA Tools version</li> <li>Operating system</li> <li>Python version</li> <li>Any error messages from the console</li> <li>A clear description of the problem</li> <li>Steps or examples to reproduce the issue (screenshots are welcome, but please include text/code for easy copy/paste when possible)</li> </ul> </li> <li> <p>Be ready to answer follow-up questions or provide additional information if needed. Your input helps us resolve issues more quickly!</p> </li> </ol>"},{"location":"developer/contributing/#helping-others","title":"Helping Others","text":"<p>If you see questions or issues from other users, feel free to share your knowledge and suggestions. Your experience can make a big difference in the community.</p>"},{"location":"developer/contributing/#improving-documentation","title":"Improving Documentation","text":"<p>We strive to keep our documentation clear and helpful, but there is always room for improvement. If you notice something missing or unclear, please help us by suggesting changes or additions. See the Development Guide for more information.</p>"},{"location":"developer/contributing/#for-developers","title":"For Developers","text":""},{"location":"developer/contributing/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Pull requests are always welcome! If you would like to contribute code\u2014whether it\u2019s fixing bugs or adding new features\u2014please review our Development Guide for details on setting up your environment and following our process.</p>"},{"location":"developer/contributing/#reviewing-code","title":"Reviewing Code","text":"<p>Participate in code reviews by providing constructive feedback and suggestions. Collaborating on code helps us maintain high quality and encourages learning and growth for everyone involved.</p> <p>Thank you for being part of the BERA Tools community!</p>"},{"location":"developer/development/","title":"Development","text":""},{"location":"developer/development/#project-layout","title":"Project Layout","text":"<p>There are a number of files for build, test, and continuous integration in the root of the project, but in general, the project is broken up like so.</p> <pre><code>\u251c\u2500\u2500 beratools\n\u2502   \u251c\u2500\u2500 core\n\u2502   \u251c\u2500\u2500 gui\n\u2502   \u2514\u2500\u2500 tools\n\u251c\u2500\u2500 docs\n\u2502   \u2514\u2500\u2500 files\n\u251c\u2500\u2500 notebooks\n\u251c\u2500\u2500 tests\n</code></pre> Directory Description <code>beratools/core</code> Core algorithms and logic. <code>beratools/gui</code> GUI components and assets. <code>beratools/tools</code> Tool implementations. <code>docs/files/developer</code> Developer documentation. <code>notebooks</code> Example notebooks and configs. <code>tests</code> Unit and integration tests."},{"location":"developer/development/#coding-standards","title":"Coding Standards","text":"<p>When writing code, the code should roughly conform to PEP8 and PEP257 suggestions.  The PyMdown Extensions project utilizes the Flake8 linter (with some additional plugins) to ensure code conforms (give or take some of the rules). When in doubt follow the formatting hints of existing code when adding or modifying files. existing files.  Listed below are the modules used:</p> <ul> <li>@PyCQA/flake8</li> <li>@PyCQA/flake8-docstrings</li> <li>@PyCQA/pep8-naming</li> <li>@ebeweber/flake8-mutable</li> <li>@gforcada/flake8-builtins</li> </ul> <p>Flake8 can be run directly via the command line from the root of the project.</p> <pre><code>flake8\n</code></pre>"},{"location":"developer/development/#building-and-editing-documents","title":"Building and Editing Documents","text":"<p>Documents are in Markdown (with some additional syntax) and converted to HTML via Python Markdown and this extension bundle. If you would like to build and preview the documentation, you must have these packages installed:</p> <ul> <li>@Python-Markdown/markdown: the Markdown parser.</li> <li>@mkdocs/mkdocs: the document site generator.</li> <li>@squidfunk/mkdocs-material: a material theme for MkDocs.</li> <li>@timvink/mkdocs-git-revision-date-localized-plugin: inserts date a page was last updated.</li> <li>@facelessuser/pymdown-extensions: this Python Markdown extension bundle.</li> </ul> <p>These can be installed via:</p> <pre><code>pip install -r requirements/docs.txt\n</code></pre> <p>In order to build and preview the documents, just run the command below from the root of the project and you should be able to view the documents at <code>localhost:8000</code> in your browser. After that, you should be able to update the documents and have your browser preview update live.</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"developer/development/#tests","title":"Tests","text":"<p>In order to preserve good code health, a test suite has been put together with pytest (@pytest-dev/pytest). There are currently two kinds of tests: syntax and targeted.  To run these tests, you can use the following command:</p> <p>You can also run the tests by first installing the requirements:</p> <pre><code>pip install -e .[dev]\n</code></pre> <p>And then run the tests with:</p> <pre><code>python tests/test_workflow.py\n</code></pre>"},{"location":"developer/development/#targeted","title":"Targeted","text":"<p>Targeted tests are unit tests that target specific areas in the code and exercises them to ensure proper functionality. These tests are found in <code>test_targeted.py</code>.</p> <p>You can run only these tests from the root of the project with:</p> <pre><code>python run_tests.py --test-target targeted\n</code></pre> <p>You could also run them directly with:</p> <pre><code>py.test tests/test_targeted.py\n</code></pre>"},{"location":"developer/development/#code-coverage","title":"Code Coverage","text":"<p>When running the validation tests through Tox, it is setup to track code coverage via the Coverage (@bitbucket:ned/coveragepy) module.  Coverage is run on each <code>pyxx</code> environment.  If you've made changes to the code, you can clear the old coverage data:</p> <pre><code>coverage erase\n</code></pre> <p>Then run each unit test environment to and coverage will be calculated. All the data from each run is merged together. HTML is output for each file in <code>.tox/pyXX-unittests/tmp</code>.  You can use these to see areas that are not covered/exercised yet with testing.</p> <p>You can checkout <code>tox.ini</code> to see how this is accomplished.</p>"},{"location":"developer/tool_template/","title":"Tool Template","text":""},{"location":"developer/tool_template/#tool_templatepy","title":"tool_template.py","text":"<p>This file provides a template for developing new geospatial tools in the BERA Tools framework.</p>"},{"location":"developer/tool_template/#purpose","title":"Purpose","text":"<ul> <li>Serves as a starting point for custom tool development.</li> <li>Demonstrates reading, processing, and writing geospatial data.</li> </ul>"},{"location":"developer/tool_template/#features","title":"Features","text":"<ul> <li>GeoPandas Integration: Reads and writes geospatial files.</li> <li>Parallel Processing: Uses Python's <code>multiprocessing</code> via <code>execute_multiprocessing</code> for faster operations.</li> <li>Buffer Operation: Applies a buffer to each feature in the input dataset.</li> <li>Modular Design: Main entry point is the <code>tool_name</code> function; processing logic is in <code>buffer_worker</code>.</li> <li>GUI Integration: Arguments are defined in <code>beratools.json</code> for GUI support.</li> </ul>"},{"location":"developer/tool_template/#usage","title":"Usage","text":"<ul> <li>Can be run as a standalone script or imported as a module.</li> <li>When executed directly, parses arguments and prints elapsed time.</li> </ul>"},{"location":"developer/tool_template/#developer-notes","title":"Developer Notes","text":"<ul> <li>Update <code>gui/assets/beratools.json</code> for GUI integration.</li> <li>Refer to the developer's guide for implementation details.</li> <li>Licensed under GNU GPL v3.0.</li> </ul>"},{"location":"user/canopy_footprint_abs/","title":"canopy Footprint (Absolute)","text":""},{"location":"user/canopy_footprint_abs/#what-does-this-tool-do","title":"What does this tool do?","text":"<p>Canopy Footprint (Absolute) generates footprint polygons for each input line using an absolute threshold method. This is useful for mapping the area around lines (like roads or rivers) based on a canopy or cost raster, with user-defined thresholds.</p>"},{"location":"user/canopy_footprint_abs/#how-do-i-use-it","title":"How do I use it?","text":""},{"location":"user/canopy_footprint_abs/#quick-start","title":"Quick Start","text":"<ol> <li>Prepare your input files: a centerline vector file (GeoPackage or Shapefile) and a CHM raster file.</li> <li>Run the tool from GUI:</li> </ol>"},{"location":"user/canopy_footprint_abs/#what-options-can-i-set","title":"What options can I set?","text":"<ul> <li>Centerline: Path to your centerline line file</li> <li>CHM Raster: Path to your CHM raster file</li> <li>Output Footprint: Path for the output footprint file</li> </ul>"},{"location":"user/canopy_footprint_abs/#tips","title":"Tips","text":"<ul> <li>Works best with line data and a canopy or cost raster.</li> <li>Adjust <code>corridor_thresh</code> and <code>max_ln_width</code> for your data and mapping needs.</li> </ul>"},{"location":"user/centerline/","title":"Centerline","text":""},{"location":"user/centerline/#what-does-this-tool-do","title":"What does this tool do?","text":"<p>Centerline finds the least-cost path between vertices of your input lines, helping you extract centerlines (such as for rivers or roads) based on a cost raster (e.g., a canopy height model or other surface).</p>"},{"location":"user/centerline/#how-do-i-use-it","title":"How do I use it?","text":""},{"location":"user/centerline/#quick-start","title":"Quick Start","text":"<ol> <li>Prepare your input files: a line vector file (e.g., GeoPackage or Shapefile) and a raster file (e.g., canopy height model).</li> <li>Run the tool from GUI:</li> </ol> <ol> <li>Open the output file in your GIS software to see the extracted centerlines.</li> </ol>"},{"location":"user/centerline/#what-options-can-i-set","title":"What options can I set?","text":"<ul> <li>Seed Line: Path to your input line file</li> <li>CHM Raster: Path to your input raster file</li> <li>Process Segments: Process each segment between vertices (True/False, default: True)</li> <li>Output Centerline: Path for the output file</li> </ul>"},{"location":"user/centerline/#tips","title":"Tips","text":"<ul> <li>Input lines and raster must have the same spatial reference (CRS).</li> <li>Output includes centerlines and auxiliary layers (least cost path, corridor polygons).</li> <li>Works with GeoPackage or Shapefile formats.</li> </ul>"},{"location":"user/check_seed_line/","title":"Check Seed Line","text":""},{"location":"user/check_seed_line/#what-does-this-tool-do","title":"What does this tool do?","text":"<p>Check Seed Line helps you group and clean up seed lines. It reads your input file, merges and splits lines at intersection, and saves a new file with grouped lines\u2014making your data clean and ready for mapping and analysis.</p>"},{"location":"user/check_seed_line/#how-do-i-use-it","title":"How do I use it?","text":""},{"location":"user/check_seed_line/#quick-start","title":"Quick Start","text":"<ol> <li>Prepare your input file (GeoPackage, Shapefile, etc.) with seed line features.</li> <li>Run the tool from the GUI:    </li> </ol>"},{"location":"user/check_seed_line/#what-options-can-i-set","title":"What options can I set?","text":"<ul> <li>See Line: Path to your input file</li> <li>Output Seed Line: Output line layer after QC</li> </ul>"},{"location":"user/check_seed_line/#tips","title":"Tips","text":"<ul> <li>Works with line data (not points or polygons).</li> </ul>"},{"location":"user/ground_footprint/","title":"Ground Footprint","text":""},{"location":"user/ground_footprint/#what-does-this-tool-do","title":"What does this tool do?","text":"<p>Ground Footprint creates footprint polygons for each input line using a fixed-width buffer, based on the measured width of the line features. This is useful for mapping corridors or buffered areas around lines (like roads or rivers) using a consistent width or percentile-based width.</p>"},{"location":"user/ground_footprint/#how-do-i-use-it","title":"How do I use it?","text":""},{"location":"user/ground_footprint/#quick-start","title":"Quick Start","text":"<ol> <li>Prepare your input files: a centerline vector file (GeoPackage or Shapefile) and any type of canopy polygon footprint file.</li> <li>Run the tool from GUI:</li> </ol>"},{"location":"user/ground_footprint/#what-options-can-i-set","title":"What options can I set?","text":"<ul> <li>Centerline: Path to your input line file</li> <li>Input Footprint: Path to your input absolute or relative canopy footprint polygon file</li> <li>Output Footprint: Path for the output ground footprint file</li> </ul>"},{"location":"user/ground_footprint/#tips","title":"Tips","text":"<ul> <li>Use <code>max_width=True</code> to buffer using the maximum measured width (plus 20%).</li> <li>Default is to use the 75th percentile width for more</li> </ul>"},{"location":"user/installation/","title":"Installation","text":"<p>Welcome to BERA Tools! This guide will help you install the package and get started quickly.</p>"},{"location":"user/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 - 3.13</li> <li>conda or pip</li> </ul>"},{"location":"user/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"user/installation/#using-conda","title":"Using conda","text":"<p>Have Miniconda installed on your system, then create an environment from the provided environment.yml:</p> <pre><code>conda env create -f environment.yml\nconda activate bera\n</code></pre>"},{"location":"user/installation/#using-pip","title":"Using Pip","text":"<p>BERA Tools is published to Pypi and can be installed by pip. But on Windows, GDAL should be installed first. Please refer to GDAL for Windows for more information.</p> <p>OSGeo4W is recommended for Windows, alongside conda.</p> <pre><code>pip install beratools\n</code></pre>"},{"location":"user/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that BERA Tools is installed correctly:</p> <pre><code>beratools\n</code></pre> <p>This will start the main GUI.</p>"},{"location":"user/installation/#advanced-installation","title":"Advanced Installation","text":"<p>Developer Guide \u2014 Detailed instructions for installing from source, running tests, and contributing.</p>"},{"location":"user/installation/#update-bera-tools","title":"Update BERA Tools","text":"<p>Run the follwing commands to update BERA Tools.</p> condapip <pre><code>conda update beratools\n</code></pre> <pre><code>pip install --upgrade beratools\n</code></pre>"},{"location":"user/installation/#remove-bera-tools","title":"Remove BERA Tools","text":"<p>Remove BERA Tools from environment:</p> condapip <pre><code>conda remove beratools\n</code></pre> <pre><code>pip uninstall beratools\n</code></pre> <p>Remove whole conda environment:</p> <pre><code>conda activate  # go to base env\nconda env remove -n bera\n</code></pre>"},{"location":"user/line_footprint_rel/","title":"Canopy Footprint (Relative)","text":""},{"location":"user/line_footprint_rel/#what-does-this-tool-do","title":"What does this tool do?","text":"<p>Canopy Footprint (Relative) creates dynamic footprint polygons for each input line using a least-cost corridor method and thresholds that are calculated individually for each line. This is useful for mapping areas around lines (like roads or rivers) where the buffer adapts to local canopy or cost raster values.</p>"},{"location":"user/line_footprint_rel/#how-do-i-use-it","title":"How do I use it?","text":""},{"location":"user/line_footprint_rel/#quick-start","title":"Quick Start","text":"<ol> <li>Prepare your input files: a centerline vector file (GeoPackage or Shapefile) and a CHM raster.</li> <li>Run the tool from GUI:</li> </ol>"},{"location":"user/line_footprint_rel/#what-options-can-i-set","title":"What options can I set?","text":"<ul> <li>Centerline: Path to your input centerline file</li> <li>CHM Raster: Path to your canopy raster file</li> <li>Output Footprint: Path to your output footprint file</li> </ul>"},{"location":"user/line_footprint_rel/#tips","title":"Tips","text":"<ul> <li>This tool adapts the buffer size for each line based on local raster values.</li> </ul>"},{"location":"user/vertex_optimization/","title":"Vertex Optimization","text":""},{"location":"user/vertex_optimization/#what-does-this-tool-do","title":"What does this tool do?","text":"<p>Vertex Optimization improves the geometry of line features by optimizing the position of their vertices based on a reference raster (such as a canopy height model or cost surface). This helps to align lines more accurately with features in the raster.</p>"},{"location":"user/vertex_optimization/#how-do-i-use-it","title":"How do I use it?","text":""},{"location":"user/vertex_optimization/#quick-start","title":"Quick Start","text":"<ol> <li>Prepare your input files: a seed line file (GeoPackage or Shapefile) and a CHM raster file.</li> <li>Run the tool from GUI:</li> </ol>"},{"location":"user/vertex_optimization/#what-options-can-i-set","title":"What options can I set?","text":"<ul> <li>Input Line: Path to your input line file </li> <li>CHM Raster: Path to your input CHM raster file</li> <li>Vertex searching distance: Maximum distance to search for optimal vertex placement</li> <li>Optimized Line: Path for the output file</li> </ul>"},{"location":"user/vertex_optimization/#tips","title":"Tips","text":"<ul> <li>Input lines and raster must have the same spatial reference (CRS).</li> <li>QC seed lines to make best results.</li> </ul>"}]}